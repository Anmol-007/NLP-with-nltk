import nltk
import random
from nltk.corpus import movie_reviews
from nltk.tokenize import word_tokenize
from nltk.classify.scikitlearn import SklearnClassifier
import pickle

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode


class VoteClassifier(ClassifierI):
	def __init__(self, *classifiers):
		self._classifiers = classifiers
	
	def classify(self, features):
		votes = []
		for c in self._classifiers:
			v = c.classify(features)
			votes.append(v)
		return mode(votes)
		
	def confidence(self, features):
		votes = []
		for c in self._classifiers:
			v = c.classify(features)
			votes.append(v)
		
		choice_votes = votes.count(mode(votes))
		conf = float(choice_votes) / len(votes)
		return conf
		
		
documents_f = open("pickled_algos/documents.pickle", "rb")
documents = pickle.load(documents_f)
documents_f.close()

word_features5k_f = open("pickled_algos/word_features5k.pickle", "rb")
word_features5k = pickle.load(word_features5k_f)
word_features5k_f.close()


def find_features(document):
	words = word_tokenize(document)
	features = {}
	for w in word_features5k:
		features[w] = (w in words) # returns boolean 
	
	return features
	

featuresets_f = open("pickled_algos/featuresets.pickle", "rb")
featuresets = pickle.load(featuresets_f)
featuresets_f.close()
#print(len(documents))


random.shuffle(featuresets)
#positive reviews data
training_set = featuresets[:10000]
testing_set = featuresets[10000:]	

#negative reviews data
#training_set = featuresets[100:]
#testing_set = featuresets[:100]	



#Naive Bayes
# posterior = prior_occurances * likelihood / evidence
open_file = open("pickled_algos/original_naivebayes.pickle", "rb")
classifier = pickle.load(open_file)
open_file.close()


#MultinomialNB from scikitlearn
open_file = open("pickled_algos/MNB_naivebayes.pickle", "rb")
MNB_classifier = pickle.load(open_file)
open_file.close()

#BernoulliNB
open_file = open("pickled_algos/BNB_naivebayes.pickle", "rb")
BNB_classifier = pickle.load(open_file)
open_file.close()

#LogisticRegression, SDGClassifier
#SVC, LinearSVC, NuSVC
open_file = open("pickled_algos/LogisticRegression_naivebayes.pickle", "rb")
LogisticRegression_classifier = pickle.load(open_file)
open_file.close()


#SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
#SGDClassifier_classifier.train(training_set)
#print('SGDClassifier Algo accuracy percent:', (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

#LinearSVC
open_file = open("pickled_algos/LinearSVC_naivebayes.pickle", "rb")
LinearSVC_classifier = pickle.load(open_file)
open_file.close()

#NuSVC
open_file = open("pickled_algos/NuSVC_naivebayes.pickle", "rb")
NuSVC_classifier = pickle.load(open_file)
open_file.close()

## Vote Classifier & Confidence 

## 7 classfiers
voted_classifier =  VoteClassifier(	MNB_classifier, 
					BNB_classifier, 
					LogisticRegression_classifier, 
					LinearSVC_classifier, 
					NuSVC_classifier)
		


def sentiment(text):
	feats = find_features(text)
	result = "Type of review: %s and Confidence level: %f" % ( voted_classifier.classify(feats), voted_classifier.confidence(feats) )
	#return result
	return voted_classifier.classify(feats), voted_classifier.confidence(feats)

#print (testing_set[0][0])


